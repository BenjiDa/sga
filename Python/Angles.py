# Autogenerated with SMOP 
from smop.core import *
# Angles.m

    
@function
def Angles(trd1=None,plg1=None,trd2=None,plg2=None,ans0=None,*args,**kwargs):
    varargin = Angles.varargin
    nargin = Angles.nargin

    #Angles calculates the angles between two lines, between two planes,
#the line which is the intersection of two planes, or the plane 
#containing two apparent dips
    
    #   [ans1,ans2] = Angles(trd1,plg1,trd2,plg2,ans0) operates on
#   two lines or planes with trend/plunge or strike/dip equal to 
#   trd1/plg1 and trd2/plg2
    
    #   ans0 is a character that tells the function what to calculate:
    
    #       ans0 = 'a' -> the orientation of a plane given two apparent dips
#       ans0 = 'l' -> the angle between two lines
    
    #       In the above two cases, the user sends the trend and plunge of two
#       lines
    
    #       ans0 = 'i' -> the intersection of two planes
#       ans0 = 'p' -> the angle between two planes
    
    #       In the above two cases the user sends the strike and dip of two
#       planes following the right hand rule
    
    #   NOTE: Input/Output angles are in radians
    
    #   Angles uses functions SphToCart, CartToSph and Pole
    
    #MATLAB script written by Nestor Cardozo for the book Structural 
#Geology Algorithms by Allmendinger, Cardozo, & Fisher, 2011. If you use
#this script, please cite this as "Cardozo in Allmendinger et al. (2011)"
    
    #If planes have been entered
    if ans0 == 'i' or ans0 == 'p':
        k=1
# Angles.m:34
        #Else if lines have been entered
    else:
        if ans0 == 'a' or ans0 == 'l':
            k=0
# Angles.m:37
    
    #Calculate the direction cosines of the lines or poles to planes
    cn1,ce1,cd1=SphToCart(trd1,plg1,k,nargout=3)
# Angles.m:41
    cn2,ce2,cd2=SphToCart(trd2,plg2,k,nargout=3)
# Angles.m:42
    #If angle between 2 lines or between the poles to 2 planes
    if ans0 == 'l' or ans0 == 'p':
        # Use dot product = Sum of the products of the direction cosines
        ans1=acos(dot(cn1,cn2) + dot(ce1,ce2) + dot(cd1,cd2))
# Angles.m:47
        ans2=pi - ans1
# Angles.m:48
    
    #If intersection of two planes or pole to a plane containing two
#apparent dips
    if ans0 == 'a' or ans0 == 'i':
        #If the 2 planes or apparent dips are parallel return an error
        if trd1 == trd2 and plg1 == plg2:
            error('lines or planes are parallel')
        else:
            cn=dot(ce1,cd2) - dot(cd1,ce2)
# Angles.m:59
            ce=dot(cd1,cn2) - dot(cn1,cd2)
# Angles.m:60
            cd=dot(cn1,ce2) - dot(ce1,cn2)
# Angles.m:61
            if cd < 0.0:
                cn=- cn
# Angles.m:64
                ce=- ce
# Angles.m:65
                cd=- cd
# Angles.m:66
            #Convert vector to unit vector by dividing it by its length
            r=sqrt(dot(cn,cn) + dot(ce,ce) + dot(cd,cd))
# Angles.m:69
            trd,plg=CartToSph(cn / r,ce / r,cd / r,nargout=2)
# Angles.m:71
            if ans0 == 'i':
                ans1=copy(trd)
# Angles.m:74
                ans2=copy(plg)
# Angles.m:75
            else:
                if ans0 == 'a':
                    ans1,ans2=Pole(trd,plg,0,nargout=2)
# Angles.m:78
    
    return ans1,ans2
    
if __name__ == '__main__':
    pass
    