# Autogenerated with SMOP 
from smop.core import *
# BedRealizations.m

    
@function
def BedRealizations(xp=None,yp=None,N=None,sigma=None,corrl=None,*args,**kwargs):
    varargin = BedRealizations.varargin
    nargin = BedRealizations.nargin

    #BedRealizations generates and plots realizations of a bed using a 
#spherical variogram and the Cholesky method
    
    #   USE: rlzt = BedRealizations(xp,yp,N,sigma,corrl)
    
    #   xp = column vector with x locations of points along bed
#   yp = column vector with y locations of points along bed
#   N = number of realizations
#   sigma = Variance
#   corrl = Correlation length
#   rlzt = npoints x 2 x N+1 matrix with bed realizations. The first
#          realization in this matrix is the input xp, yp bed
    
    #   BedRealizations uses function CorrSpher
    
    #MATLAB script written by Nestor Cardozo for the book Structural 
#Geology Algorithms by Allmendinger, Cardozo, & Fisher, 2011. If you use
#this script, please cite this as "Cardozo in Allmendinger et al. (2011)"
    
    #Number of points along bed
    nj=max(size(xp))
# BedRealizations.m:22
    #Variance matrix
    Sf=zeros(nj,nj)
# BedRealizations.m:25
    for i in arange(1,nj).reshape(-1):
        for j in arange(1,nj).reshape(-1):
            if i == j:
                Sf[i,j]=sigma
# BedRealizations.m:29
    
    #Calculate correlation matrix using spherical variogram model. Use our
#function CorrSpher
    Rf=CorrSpher(xp,yp,corrl)
# BedRealizations.m:36
    #Calculate covariance matrix (Cf)
    Cf=dot(dot(Sf,Rf),Sf)
# BedRealizations.m:38
    #Cholesky decomposition of covariance matrix. Here we use the MATLAB
#function chol
    L,p=chol(Cf,'lower',nargout=2)
# BedRealizations.m:41
    if p > 0:
        error('Cf not positive definite')
    
    #Initialize realizations
    rlzt=zeros(nj,2,N + 1)
# BedRealizations.m:47
    #Start figure
    figure
    hold('on')
    gray=matlabarray(cat(0.75,0.75,0.75))
# BedRealizations.m:52
    #Generate realizations
    for i in arange(1,N + 1).reshape(-1):
        #First realization is the bed itself
        if i == 1:
            rlzt[:,1,i]=xp
# BedRealizations.m:58
            rlzt[:,2,i]=yp
# BedRealizations.m:59
        else:
            #Compute uncertainty in horizontal and vertical
            z=randn(nj,1)
# BedRealizations.m:63
            lz=dot(L,z)
# BedRealizations.m:64
            rlzt[:,1,i]=xp + lz
# BedRealizations.m:66
            rlzt[:,2,i]=yp + lz
# BedRealizations.m:67
        # Plot realization
        plot(rlzt[:,1,i],rlzt[:,2,i],'.','MarkerEdgeColor',gray)
    
    #plot bed in black
    plot(rlzt[:,1,1],rlzt[:,2,1],'k.')
    hold('off')
    axis('equal')
    return rlzt
    
if __name__ == '__main__':
    pass
    