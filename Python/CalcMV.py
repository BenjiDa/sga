# Autogenerated with SMOP 
from smop.core import *
# CalcMV.m

    
@function
def CalcMV(T=None,P=None,*args,**kwargs):
    varargin = CalcMV.varargin
    nargin = CalcMV.nargin

    #CalcMV calculates the mean vector for a given series of lines
    
    #   [trd,plg,Rave,conc,d99,d95] = CalcMV(T,P) calculates the trend (trd) 
#   and plunge (plg) of the mean vector, its normalized length (Rave), and
#   Fisher statistics (concentration factor (conc), 99 (d99) and 
#   95 (d95) # uncertainty cones); for a series of lines whose trends
#   and plunges are stored in the vectors T and P
    
    #   NOTE: Input/Output trends and plunges, as well as uncertainty
#   cones are in radians
    
    #   CalcMV uses functions SphToCart and CartToSph
    
    #MATLAB script written by Nestor Cardozo for the book Structural 
#Geology Algorithms by Allmendinger, Cardozo, & Fisher, 2011. If you use
#this script, please cite this as "Cardozo in Allmendinger et al. (2011)"
    
    #Number of lines
    nlines=max(size(T))
# CalcMV.m:20
    #Initialize the 3 direction cosines which contain the sums of the
#individual vectors (i.e. the coordinates of the resultant vector)
    CNsum=0.0
# CalcMV.m:24
    CEsum=0.0
# CalcMV.m:25
    CDsum=0.0
# CalcMV.m:26
    #Now add up all the individual vectors
    for i in arange(1,nlines).reshape(-1):
        cn,ce,cd=SphToCart(T[i],P[i],0,nargout=3)
# CalcMV.m:30
        CNsum=CNsum + cn
# CalcMV.m:31
        CEsum=CEsum + ce
# CalcMV.m:32
        CDsum=CDsum + cd
# CalcMV.m:33
    
    #R is the length of the resultant vector and Rave is the lenght of
#the resultant vector normalized by the number of lines
    R=sqrt(dot(CNsum,CNsum) + dot(CEsum,CEsum) + dot(CDsum,CDsum))
# CalcMV.m:38
    Rave=R / nlines
# CalcMV.m:39
    #If Rave is lower than 0.1, the mean vector is insignificant, return error
    if Rave < 0.1:
        error('Mean vector is insignificant')
        #Else
    else:
        #Divide the resultant vector by its length to get the average
    #unit vector
        CNsum=CNsum / R
# CalcMV.m:47
        CEsum=CEsum / R
# CalcMV.m:48
        CDsum=CDsum / R
# CalcMV.m:49
        #mean vector to the lower hemisphere
        if CDsum < 0.0:
            CNsum=- CNsum
# CalcMV.m:53
            CEsum=- CEsum
# CalcMV.m:54
            CDsum=- CDsum
# CalcMV.m:55
        #Convert the mean vector from direction cosines to trend and plunge
        trd,plg=CartToSph(CNsum,CEsum,CDsum,nargout=2)
# CalcMV.m:58
        #For more information on these statistics see Fisher et al. (1987)
        if R < nlines:
            if nlines < 16:
                afact=1.0 - (1.0 / nlines)
# CalcMV.m:63
                conc=dot((nlines / (nlines - R)),afact ** 2)
# CalcMV.m:64
            else:
                conc=(nlines - 1.0) / (nlines - R)
# CalcMV.m:66
        if Rave >= 0.65 and Rave < 1.0:
            afact=1.0 / 0.01
# CalcMV.m:70
            bfact=1.0 / (nlines - 1.0)
# CalcMV.m:71
            d99=acos(1.0 - dot(((nlines - R) / R),(afact ** bfact - 1.0)))
# CalcMV.m:72
            afact=1.0 / 0.05
# CalcMV.m:73
            d95=acos(1.0 - dot(((nlines - R) / R),(afact ** bfact - 1.0)))
# CalcMV.m:74
    
    return trd,plg,Rave,conc,d99,d95
    
if __name__ == '__main__':
    pass
    