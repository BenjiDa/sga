# Autogenerated with SMOP 
from smop.core import *
# PTAxes.m

    
@function
def PTAxes(fault=None,slip=None,*args,**kwargs):
    varargin = PTAxes.varargin
    nargin = PTAxes.nargin

    #PTAxes computes the P and T axes from the orientation of several fault 
#planes and their slip vectors. Results are plotted in an equal area 
#stereonet
    
    #   USE: [P,T] = PTAxes(fault,slip)
    
    #   fault = nfaults x 2 vector with strikes and dips of faults
#   slip = nfaults x 2 vector with trends and plunges of slip vectors
#   P = nfaults x 2 vector with trends and plunges of the P axes
#   T = nfaults x 2 vector with trends and plunges of the T axes
    
    #   NOTE: Input/Output angles are in radians
    
    #   PTAxes uses functions SphToCart, CartToSph, Stereonet, GreatCircle and
#   StCoordLine
    
    #MATLAB script written by Nestor Cardozo for the book Structural 
#Geology Algorithms by Allmendinger, Cardozo, & Fisher, 2011. If you use
#this script, please cite this as "Cardozo in Allmendinger et al. (2011)"
    
    #Initialize some vectors
    n=zeros(1,3)
# PTAxes.m:23
    u=zeros(1,3)
# PTAxes.m:24
    eps=zeros(3,3)
# PTAxes.m:25
    P=zeros(size(fault,1),2)
# PTAxes.m:26
    T=zeros(size(fault,1),2)
# PTAxes.m:27
    #For all faults
    for i in arange(1,size(fault,1)).reshape(-1):
        #Direction cosines of pole to fault and slip vector
        n[1],n[2],n[3]=SphToCart(fault[i,1],fault[i,2],1,nargout=3)
# PTAxes.m:32
        u[1],u[2],u[3]=SphToCart(slip[i,1],slip[i,2],0,nargout=3)
# PTAxes.m:33
        for j in arange(1,3).reshape(-1):
            for k in arange(1,3).reshape(-1):
                eps[j,k]=(dot(u[j],n[k]) + dot(u[k],n[j]))
# PTAxes.m:37
        #Compute orientations of principal axes of strain. Here we use the 
    #MATLAB function eig
        V,D=eig(eps,nargout=2)
# PTAxes.m:42
        P[i,1],P[i,2]=CartToSph(V[1,3],V[2,3],V[3,3],nargout=2)
# PTAxes.m:44
        T[i,1],T[i,2]=CartToSph(V[1,1],V[2,1],V[3,1],nargout=2)
# PTAxes.m:46
    
    #Plot stereonet
    Stereonet(0,dot(90,pi) / 180,dot(10,pi) / 180,1)
    hold('on')
    #Plot other elements
    for i in arange(1,size(fault,1)).reshape(-1):
        #Plot fault
        path=GreatCircle(fault[i,1],fault[i,2],1)
# PTAxes.m:55
        plot(path[:,1],path[:,2],'r')
        xp,yp=StCoordLine(slip[i,1],slip[i,2],1,nargout=2)
# PTAxes.m:58
        plot(xp,yp,'rs')
        xp,yp=StCoordLine(P[i,1],P[i,2],1,nargout=2)
# PTAxes.m:61
        plot(xp,yp,'ko','MarkerFaceColor','k')
        xp,yp=StCoordLine(T[i,1],T[i,2],1,nargout=2)
# PTAxes.m:64
        plot(xp,yp,'ko')
    
    #Release plot
    hold('off')
    return P,T
    
if __name__ == '__main__':
    pass
    