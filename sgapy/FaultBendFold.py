# Autogenerated with SMOP 
from smop.core import *
# FaultBendFold.m

    
@function
def FaultBendFold(yp=None,psect=None,pramp=None,pslip=None,*args,**kwargs):
    varargin = FaultBendFold.varargin
    nargin = FaultBendFold.nargin

    #FaultBendFold plots the evolution of a simple step, Mode I fault bend fold
    
    #   USE: frames = FaultBendFold(yp,psect,pramp,pslip)
    
    #   yp = Datums or vertical coordinates of undeformed, horizontal beds
#   psect = A 1 x 2 vector containing the extent of the section, and the
#           number of points in each bed 
#   pramp = A 1 x 3 vector containing the x coordinate of the lower bend in
#           the decollement, the ramp angle, and the height of the ramp
#   pslip = A 1 x 2 vector containing the total and incremental slip
#   frames = An array structure containing the frames of the fold evolution
#            You can play the movie again just by typing movie(frames)
#   
#   NOTE: Input ramp angle should be in radians
    
    #   FaultBendFold uses function SuppeEquation
    
    #MATLAB script written by Nestor Cardozo for the book Structural 
#Geology Algorithms by Allmendinger, Cardozo, & Fisher, 2011. If you use
#this script, please cite this as "Cardozo in Allmendinger et al. (2011)"
    
    #Extent of section and number of points in each bed
    extent=psect[1]
# FaultBendFold.m:24
    npoint=psect[2]
# FaultBendFold.m:24
    #Make undeformed beds geometry: This is a grid of points along the beds
    xp=arange(0.0,extent,extent / npoint)
# FaultBendFold.m:26
    XP,YP=meshgrid(xp,yp,nargout=2)
# FaultBendFold.m:27
    #Fault geometry and slip
    xramp=pramp[1]
# FaultBendFold.m:30
    ramp=pramp[2]
# FaultBendFold.m:30
    height=pramp[3]
# FaultBendFold.m:30
    slip=pslip[1]
# FaultBendFold.m:31
    sinc=pslip[2]
# FaultBendFold.m:31
    #Number of slip increments
    ninc=round(slip / sinc)
# FaultBendFold.m:33
    #Ramp angle cannot be greater than 30 degrees, and if it is 30 degrees, 
#make it a little bit smaller to avoid convergence problems
    if ramp > dot(30,pi) / 180:
        error('ramp angle cannot be more than 30 degrees')
    else:
        if ramp == dot(30,pi) / 180:
            ramp=dot(29.9,pi) / 180
# FaultBendFold.m:40
    
    #Minimize Eq. 11.8 to obtain gamma from the input ramp angle (theta)
    options=optimset('display','off')
# FaultBendFold.m:44
    gama=fzero('SuppeEquation',1.5,options,ramp)
# FaultBendFold.m:45
    #Compute slip ratio R (Eq. 11.8)
    R=sin(gama - ramp) / sin(gama)
# FaultBendFold.m:47
    #Make fault geometry
    xf=matlabarray(cat(0,xramp,xramp + height / tan(ramp),dot(1.5,extent)))
# FaultBendFold.m:50
    yf=matlabarray(cat(0,0,height,height))
# FaultBendFold.m:51
    #From the origin of each bed compute the number of points that are in the
#hanging wall. These points are the ones that will move
    hwid=zeros(size(yp,2))
# FaultBendFold.m:54
    for i in arange(1,size(yp,2)).reshape(-1):
        if yp[i] <= height:
            hwid[i]=0
# FaultBendFold.m:57
            for j in arange(1,size(xp,2)).reshape(-1):
                if xp[j] <= xramp + yp[i] / tan(ramp):
                    hwid[i]=hwid[i] + 1
# FaultBendFold.m:60
        else:
            hwid[i]=size(xp,2)
# FaultBendFold.m:64
    
    #Deform beds: Apply velocity fields of Eq. 11.9
#Loop over slip increments
    for i in arange(1,ninc).reshape(-1):
        #Loop over number of beds
        for j in arange(1,size(XP,1)).reshape(-1):
            #Loop over number of hanging wall points in each bed
            for k in arange(1,hwid[j]).reshape(-1):
                #If point is in domain 1
                if XP[j,k] < xramp - dot(YP[j,k],tan(ramp / 2)):
                    XP[j,k]=XP[j,k] + sinc
# FaultBendFold.m:77
                    YP[j,k]=YP[j,k]
# FaultBendFold.m:78
                else:
                    #If point is in domain 2
                    if YP[j,k] < height:
                        XP[j,k]=XP[j,k] + dot(sinc,cos(ramp))
# FaultBendFold.m:82
                        YP[j,k]=YP[j,k] + dot(sinc,sin(ramp))
# FaultBendFold.m:83
                    else:
                        #If stage 1 of fault bend fold (Fig. 11.3a)
                        if dot(dot(i,sinc),sin(ramp)) < height:
                            #If point is in domain 2
                            if XP[j,k] < xramp + height / tan(ramp) + dot((YP[j,k] - height),tan(pi / 2 - gama)):
                                XP[j,k]=XP[j,k] + dot(sinc,cos(ramp))
# FaultBendFold.m:90
                                YP[j,k]=YP[j,k] + dot(sinc,sin(ramp))
# FaultBendFold.m:91
                            else:
                                XP[j,k]=XP[j,k] + dot(sinc,R)
# FaultBendFold.m:94
                                YP[j,k]=YP[j,k]
# FaultBendFold.m:95
                            #If stage 2 of fault bend fold (Fig. 11.3b)
                        else:
                            #If point is in domain 2
                            if XP[j,k] < xramp + height / tan(ramp) - dot((YP[j,k] - height),tan(ramp / 2)):
                                XP[j,k]=XP[j,k] + dot(sinc,cos(ramp))
# FaultBendFold.m:102
                                YP[j,k]=YP[j,k] + dot(sinc,sin(ramp))
# FaultBendFold.m:103
                            else:
                                XP[j,k]=XP[j,k] + dot(sinc,R)
# FaultBendFold.m:106
                                YP[j,k]=YP[j,k]
# FaultBendFold.m:107
        #Plot increment
    #Fault
        plot(xf,yf,'r-','LineWidth',2)
        hold('on')
        for j in arange(1,size(yp,2)).reshape(-1):
            #If below ramp
            if yp[j] <= height:
                plot(XP[j,1:1:hwid[j]],YP[j,1:1:hwid[j]],'k-')
                plot(XP[j,hwid[j] + 1:1:size(xp,2)],YP[j,hwid[j] + 1:1:size(xp,2)],'k-')
            else:
                plot(XP[j,:],YP[j,:],'k-')
        #Plot settings
        text(dot(0.8,extent),dot(1.75,max(yp)),strcat('Slip = ',num2str(dot(i,sinc))))
        axis('equal')
        axis(cat(0,extent,0,dot(2.0,max(yp))))
        hold('off')
        frames[i]=getframe
# FaultBendFold.m:136
    
    return frames
    
if __name__ == '__main__':
    pass
    