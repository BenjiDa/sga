# Autogenerated with SMOP 
from smop.core import *
# TrishearGrowth.m

    
@function
def TrishearGrowth(yp=None,psect=None,tparam=None,sinc=None,G=None,*args,**kwargs):
    varargin = TrishearGrowth.varargin
    nargin = TrishearGrowth.nargin

    #Trishear plots the evolution of a 2D trishear fault propagation fold and
#adds growth strata for a given subsidence versus uplift rate
    
    #   USE: frames = TrishearGrowth(yp,psect,tparam,sinc,G)
    
    #   yp = Datums or vertical coordinates of undeformed, horizontal beds
#   psect = A 1 x 2 vector containing the extent of the section, and the 
#           number of points in each bed 
#   tparam = A 1 x 7 vector containing: the x coordinate of the fault tip 
#           (entry 1), the y coordinate of the fault tip (entry 2), the
#           ramp angle (entry 3), the P/S (entry 4), the trishear angle
#           (entry 5), the fault slip (entry 6), and the concentration
#           factor (entry 7)
#   sinc = slip increment
#   G = Subsidence versus uplift rate
#   frames = An array structure containing the frames of the fold evolution
#            You can play the movie again just by typing movie(frames)
#   
#   NOTE: Input ramp and trishear angles should be in radians
#         For reverse faults use positive slip and slip increment
#         For normal faults use negative slip and slip increment
    
    #   TrishearGrowth uses function VelTrishear
    
    #MATLAB script written by Nestor Cardozo for the book Structural 
#Geology Algorithms by Allmendinger, Cardozo, & Fisher, 2011. If you use
#this script, please cite this as "Cardozo in Allmendinger et al. (2011)"
    
    # Top of layers
    top=yp[size(yp,2)]
# TrishearGrowth.m:31
    #Extent of section and number of points in each bed
    extent=psect[1]
# TrishearGrowth.m:34
    npoint=psect[2]
# TrishearGrowth.m:34
    #Make undeformed beds geometry: This is a grid of points along the beds
    xp=arange(0.0,extent,extent / npoint)
# TrishearGrowth.m:36
    XP,YP=meshgrid(xp,yp,nargout=2)
# TrishearGrowth.m:37
    # Model parameters
    xt=tparam[1]
# TrishearGrowth.m:40
    
    yt=tparam[2]
# TrishearGrowth.m:41
    
    ramp=tparam[3]
# TrishearGrowth.m:42
    
    ps=tparam[4]
# TrishearGrowth.m:43
    
    tra=tparam[5]
# TrishearGrowth.m:44
    
    m=tan(tra / 2)
# TrishearGrowth.m:45
    
    slip=tparam[6]
# TrishearGrowth.m:46
    
    c=tparam[7]
# TrishearGrowth.m:47
    
    #Number of slip increments
    ninc=round(slip / sinc)
# TrishearGrowth.m:49
    #Transformation matrix from geographic to fault coordinates
    a11=cos(ramp)
# TrishearGrowth.m:52
    a12=cos(pi / 2 - ramp)
# TrishearGrowth.m:53
    a21=cos(pi / 2 + ramp)
# TrishearGrowth.m:54
    a22=copy(a11)
# TrishearGrowth.m:55
    # Make ten growth strata
    nincG=round(ninc / 10)
# TrishearGrowth.m:58
    # Initialize count of growth strata to 1
    countG=1
# TrishearGrowth.m:60
    # Transform to coordinates parallel and perpendicular to the fault, and
# with origin at initial fault tip
    FX=dot((XP - xt),a11) + dot((YP - yt),a12)
# TrishearGrowth.m:64
    FY=dot((XP - xt),a21) + dot((YP - yt),a22)
# TrishearGrowth.m:65
    #Run trishear model
#Loop over slip increments
    for i in arange(1,ninc).reshape(-1):
        #Loop over number of beds
        for j in arange(1,size(FX,1)).reshape(-1):
            #Loop over number of points in each bed
            for k in arange(1,size(FX,2)).reshape(-1):
                #Solve trishear in a coordinate system attached to current 
            #fault tip (Eq. 11.27)
                xx=FX[j,k] - (dot(dot(ps,i),abs(sinc)))
# TrishearGrowth.m:76
                yy=FY[j,k]
# TrishearGrowth.m:77
                vx,vy=VelTrishear(xx,yy,sinc,m,c,nargout=2)
# TrishearGrowth.m:79
                FX[j,k]=FX[j,k] + vx
# TrishearGrowth.m:81
                FY[j,k]=FY[j,k] + vy
# TrishearGrowth.m:82
        #Transform back to horizontal-vertical XP, YP coordinates for plotting
        XP=(dot(FX,a11) + dot(FY,a21)) + xt
# TrishearGrowth.m:86
        YP=(dot(FX,a12) + dot(FY,a22)) + yt
# TrishearGrowth.m:87
        xtf=xt + dot((dot(dot(ps,i),abs(sinc))),cos(ramp))
# TrishearGrowth.m:89
        ytf=yt + dot((dot(dot(ps,i),abs(sinc))),sin(ramp))
# TrishearGrowth.m:90
        XF=matlabarray(cat(xt,xtf))
# TrishearGrowth.m:91
        YF=matlabarray(cat(yt,ytf))
# TrishearGrowth.m:92
        axlo=arange(0,300,10)
# TrishearGrowth.m:94
        htz=dot(axlo,m)
# TrishearGrowth.m:95
        ftz=dot(- axlo,m)
# TrishearGrowth.m:96
        XHTZ=(dot(axlo,a11) + dot(htz,a21)) + xtf
# TrishearGrowth.m:97
        YHTZ=(dot(axlo,a12) + dot(htz,a22)) + ytf
# TrishearGrowth.m:98
        XFTZ=(dot(axlo,a11) + dot(ftz,a21)) + xtf
# TrishearGrowth.m:99
        YFTZ=(dot(axlo,a12) + dot(ftz,a22)) + ytf
# TrishearGrowth.m:100
        plot(XF,YF,'r-','LineWidth',2)
        hold('on')
        plot(XHTZ,YHTZ,'b-')
        plot(XFTZ,YFTZ,'b-')
        hw=zeros(1,size(XP,2))
# TrishearGrowth.m:109
        fw=zeros(1,size(XP,2))
# TrishearGrowth.m:110
        xhb=zeros(size(XP,1),size(XP,2))
# TrishearGrowth.m:111
        yhb=zeros(size(XP,1),size(XP,2))
# TrishearGrowth.m:112
        xfb=zeros(size(XP,1),size(XP,2))
# TrishearGrowth.m:113
        yfb=zeros(size(XP,1),size(XP,2))
# TrishearGrowth.m:114
        for j in arange(1,size(XP,1)).reshape(-1):
            hw[j]=0.0
# TrishearGrowth.m:116
            fw[j]=0.0
# TrishearGrowth.m:117
            for k in arange(1,size(XP,2)).reshape(-1):
                #If hanging wall points
                if XP[j,k] <= xt + (YP[j,k] - yt) / tan(ramp):
                    hw[j]=hw[j] + 1
# TrishearGrowth.m:121
                    xhb[j,hw[j]]=XP[j,k]
# TrishearGrowth.m:122
                    yhb[j,hw[j]]=YP[j,k]
# TrishearGrowth.m:123
                else:
                    fw[j]=fw[j] + 1
# TrishearGrowth.m:126
                    xfb[j,fw[j]]=XP[j,k]
# TrishearGrowth.m:127
                    yfb[j,fw[j]]=YP[j,k]
# TrishearGrowth.m:128
            #If Pregrowth strata
            if (j <= size(yp,2)):
                plot(xhb[j,1:1:hw[j]],yhb[j,1:1:hw[j]],'k-')
                plot(xfb[j,1:1:fw[j]],yfb[j,1:1:fw[j]],'k-')
            else:
                plot(xhb[j,1:1:hw[j]],yhb[j,1:1:hw[j]],'g-')
                plot(xfb[j,1:1:fw[j]],yfb[j,1:1:fw[j]],'g-')
        #Plot settings
        text(dot(0.8,extent),dot(1.75,max(yp)),strcat('Slip = ',num2str(dot(i,sinc))))
        axis('equal')
        axis(cat(0,extent,0,dot(2.0,max(yp))))
        hold('off')
        frames[i]=getframe
# TrishearGrowth.m:147
        #not calculated. Growth strata will not look right for subsidence rate
   #lower than uplift rate G < 1.0
        if (i == dot(countG,nincG)):
            #Make growth strata
       #Update top
            top=top + dot(dot(dot(nincG,sinc),sin(ramp)),G)
# TrishearGrowth.m:154
            xm=arange(dot(i,sinc),extent + dot(i,sinc),extent / npoint)
# TrishearGrowth.m:156
            GXP,GYP=meshgrid(xm,top,nargout=2)
# TrishearGrowth.m:157
            #fault, and with origin at initial fault tip location
            GFX=dot((GXP - xt),a11) + dot((GYP - yt),a12)
# TrishearGrowth.m:160
            GFY=dot((GXP - xt),a21) + dot((GYP - yt),a22)
# TrishearGrowth.m:161
            FX=matlabarray(cat([FX],[GFX]))
# TrishearGrowth.m:163
            FY=matlabarray(cat([FY],[GFY]))
# TrishearGrowth.m:164
            countG=countG + 1
# TrishearGrowth.m:166
    
    return frames
    
if __name__ == '__main__':
    pass
    