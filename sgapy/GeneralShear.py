# Autogenerated with SMOP 
from smop.core import *
# GeneralShear.m

    
@function
def GeneralShear(pts=None,st1=None,gamma=None,kk=None,ninc=None,*args,**kwargs):
    varargin = GeneralShear.varargin
    nargin = GeneralShear.nargin

    #GeneralShear computes displacement paths, kinematic vorticity numbers
#and progressive finite strain history, for general shear with a pure 
#shear stretch, no area change, and a single shear strain
    
    #   USE: [paths,wk,pfs] = GeneralShear(pts,st1,gamma,kk,ninc)
    
    #   pts = npoints x 2 matrix with X1 and X3 locations of points
#   st1 = Pure shear stretch parallel to shear zone
#   gamma = Engineering shear strain
#   kk = An integer that indicates whether the maximum finite stretch is
#        parallel (kk = 0), or perpendicular (kk=1) to the shear direction
#   ninc = number of strain increments
#   paths = displacement paths of points
#   wk = Kinematic vorticity number
#   pfs = progressive finite strain history. column 1 = orientation of
#         maximum stretch with respect to X1 in degrees, column 2 = maximum
#         stretch magnitude
    
    #   NOTE: Intermediate principal stretch is 1.0 (Plane strain)
#         Output orientations are in radians
    
    #MATLAB script written by Nestor Cardozo for the book Structural 
#Geology Algorithms by Allmendinger, Cardozo, & Fisher, 2011. If you use
#this script, please cite this as "Cardozo in Allmendinger et al. (2011)"
    
    #Compute minimum principal stretch and incremental stretches
    st1inc=st1 ** (1.0 / ninc)
# GeneralShear.m:28
    st3=1.0 / st1
# GeneralShear.m:29
    st3inc=st3 ** (1.0 / ninc)
# GeneralShear.m:30
    #Incremental engineering shear strain
    gammainc=gamma / ninc
# GeneralShear.m:33
    #Initialize displacement paths
    npts=size(pts,1)
# GeneralShear.m:36
    
    paths=zeros(npts,2,ninc + 1)
# GeneralShear.m:37
    paths[:,:,1]=pts
# GeneralShear.m:38
    
    #Calculate incremental deformation gradient tensor
#If max. finite stretch parallel to shear direction (Eq. 10.15)
    if kk == 0:
        F=matlabarray(cat([st1inc[dot(gammainc,(st1inc - st3inc))] / (dot(2.0,log(st1inc)))],[0.0,st3inc]))
# GeneralShear.m:43
        #If max. finite stretch perpendicular to shear direction (Eq. 10.17)
    else:
        if kk == 1:
            F=matlabarray(cat([st3inc[dot(gammainc,(st3inc - st1inc))] / (dot(2.0,log(st3inc)))],[0.0,st1inc]))
# GeneralShear.m:46
    
    #Create a figure and hold
    figure
    hold('on')
    #Compute displacement paths
    for i in arange(1,npts).reshape(-1):
        for j in arange(2,ninc + 1).reshape(-1):
            #Equations 10.2-10.5
            for k in arange(1,2).reshape(-1):
                for L in arange(1,2).reshape(-1):
                    paths[i,k,j]=dot(F[k,L],paths[i,L,j - 1]) + paths[i,k,j]
# GeneralShear.m:59
        #Plot displacement path of point. Use MATLAB function squeeze to reduce
    #the 3D matrix to one vector in X1 and another in X3
        xx=squeeze(paths[i,1,:])
# GeneralShear.m:65
        yy=squeeze(paths[i,2,:])
# GeneralShear.m:66
        plot(xx,yy,'k.-')
    
    #Release plot and set axes
    hold('off')
    axis('equal')
    xlabel('X1')
    ylabel('X3')
    grid('on')
    #Determine the eigenvectors of the flow (apophyses)
    V,D=eigs(F,nargout=2)
# GeneralShear.m:77
    #If max. finite stretch parallel to shear direction
    if kk == 0:
        theta2=atan(V[2,2] / V[1,2])
# GeneralShear.m:80
        #If max. finite stretch perpendicular to shear direction
    else:
        if kk == 1:
            theta2=atan(V[2,1] / V[1,1])
# GeneralShear.m:83
    
    wk=cos(theta2)
# GeneralShear.m:85
    #Initalize progressive finite strain history. We are not including the
#initial state
    pfs=zeros(ninc)
# GeneralShear.m:89
    #Calculate progressive finite strain history
    for i in arange(1,ninc).reshape(-1):
        #First determine the finite deformation gradient tensor
        finF=F ** i
# GeneralShear.m:94
        G=dot(finF,finF.T)
# GeneralShear.m:96
        #corresponding eigenvectors of Green's tensor. Use MATLAB function eig
        V,D=eig(G,nargout=2)
# GeneralShear.m:99
        pfs[i,1]=atan(V[2,2] / V[1,2])
# GeneralShear.m:100
        pfs[i,2]=sqrt(D[2,2])
# GeneralShear.m:101
    
    #Plot progressive finite strain history
    figure
    plot(dot(pfs[:,1],180) / pi,pfs[:,2],'k.-')
    xlabel('Theta finite deg')
    ylabel('Maximum finite stretch')
    axis(cat(- 90,90,1,max(pfs[:,2]) + 0.5))
    grid('on')
    return paths,wk,pfs
    
if __name__ == '__main__':
    pass
    