# Autogenerated with SMOP 
from smop.core import *
# SimpleShear.m

    
@function
def SimpleShear(pts=None,gamma=None,ninc=None,*args,**kwargs):
    varargin = SimpleShear.varargin
    nargin = SimpleShear.nargin

    #SimpleShear computes and plots displacement paths and progressive finite
#strain history for simple shear parallel to the X1 axis
    
    #   USE: [paths,pfs] = SimpleShear(pts,gamma,ninc)
    
    #   pts: npoints x 2 matrix with X1 and X3 locations of points
#   gamma = Engineering shear strain
#   ninc = number of strain increments
#   paths = displacement paths of points
#   pfs = progressive finite strain history. column 1 = orientation of
#         maximum stretch with respect to X1 in degrees, column 2 = maximum
#         stretch magnitude
    
    #   NOTE: Intermediate principal stretch is 1.0 (Plane strain)
#         Output orientations are in radians
    
    #MATLAB script written by Nestor Cardozo for the book Structural 
#Geology Algorithms by Allmendinger, Cardozo, & Fisher, 2011. If you use
#this script, please cite this as "Cardozo in Allmendinger et al. (2011)"
    
    #Incremental engineering shear strain
    gammainc=gamma / ninc
# SimpleShear.m:23
    #Initialize displacement paths
    npts=size(pts,1)
# SimpleShear.m:26
    
    paths=zeros(npts,2,ninc + 1)
# SimpleShear.m:27
    paths[:,:,1]=pts
# SimpleShear.m:28
    
    #Calculate incremental deformation gradient tensor
    F=matlabarray(cat([1.0,gammainc],[0.0,1.0]))
# SimpleShear.m:31
    #Create a figure and hold
    figure
    hold('on')
    #Compute displacement paths
    for i in arange(1,npts).reshape(-1):
        for j in arange(2,ninc + 1).reshape(-1):
            #Equations 10.2-10.5
            for k in arange(1,2).reshape(-1):
                for L in arange(1,2).reshape(-1):
                    paths[i,k,j]=dot(F[k,L],paths[i,L,j - 1]) + paths[i,k,j]
# SimpleShear.m:43
        #Plot displacement path of point. Use MATLAB function squeeze to reduce
    #the 3D matrix to one vector in X1 and another in X3
        xx=squeeze(paths[i,1,:])
# SimpleShear.m:49
        yy=squeeze(paths[i,2,:])
# SimpleShear.m:50
        plot(xx,yy,'k.-')
    
    #Release plot and set axes
    hold('off')
    axis('equal')
    xlabel('X1')
    ylabel('X3')
    grid('on')
    #Initalize progressive finite strain history
    pfs=zeros(ninc + 1,2)
# SimpleShear.m:61
    #Initial state: Maximum extension is at 45 deg from shear zone
    pfs[1,:]=cat(pi / 4.0,1.0)
# SimpleShear.m:63
    #Calculate progressive finite strain history
    for i in arange(1,ninc).reshape(-1):
        #First determine the finite deformation gradient tensor
        finF=F ** i
# SimpleShear.m:68
        G=dot(finF,finF.T)
# SimpleShear.m:70
        #corresponding eigenvectors of Green's tensor. Use MATLAB function eig
        V,D=eig(G,nargout=2)
# SimpleShear.m:73
        pfs[i + 1,1]=atan(V[2,2] / V[1,2])
# SimpleShear.m:74
        pfs[i + 1,2]=sqrt(D[2,2])
# SimpleShear.m:75
    
    #Plot progressive finite strain history
    figure
    plot(dot(pfs[:,1],180) / pi,pfs[:,2],'k.-')
    xlabel('Theta finite deg')
    ylabel('Maximum finite stretch')
    axis(cat(- 90,90,1,max(pfs[:,2]) + 0.5))
    grid('on')
    return paths,pfs
    
if __name__ == '__main__':
    pass
    