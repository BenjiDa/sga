# Autogenerated with SMOP 
from smop.core import *
# BackTrishear.m

    
@function
def BackTrishear(xp=None,yp=None,tparam=None,sinc=None,*args,**kwargs):
    varargin = BackTrishear.varargin
    nargin = BackTrishear.nargin

    #BackTrishear retrodeforms bed for the given trishear parameters and return
#sum of square of residuals (chisq)
    
    #   USE: chisq = BackTrishear(xp,yp,tparam,sinc)
    
    #   xp = column vector with x locations of points along bed
#   yp = column vector with y locations of points along bed  
#   tparam = A 1 x 7 vector with the x and y coordinates of the fault tip 
#           (entries 1 and 2), the ramp angle (entry 3), the P/S (entry 4), 
#           the trishear angle (entry 5), the fault slip (entry 6), and the
#           concentration factor (entry 7)
#   sinc = slip increment
#   chisq = sum of square of residuals (objective function)
    
    #   NOTE: Input ramp and trishear angles should be in radians
#         For reverse faults use positive slip and slip increment
#         For normal faults use negative slip and slip increment
#         The MATLAB Statistics Toolbox is needed to run this function
    
    #   BackTrishear uses function VelTrishear
    
    #MATLAB script written by Nestor Cardozo for the book Structural 
#Geology Algorithms by Allmendinger, Cardozo, & Fisher, 2011. If you use
#this script, please cite this as "Cardozo in Allmendinger et al. (2011)"
    
    # Model parameters
    
    xtf=tparam[1]
# BackTrishear.m:29
    
    ytf=tparam[2]
# BackTrishear.m:30
    
    ramp=tparam[3]
# BackTrishear.m:31
    
    psr=dot(tparam[4],- 1.0)
# BackTrishear.m:32
    
    tra=tparam[5]
# BackTrishear.m:33
    
    m=tan(tra / 2)
# BackTrishear.m:34
    
    slip=tparam[6]
# BackTrishear.m:35
    
    c=tparam[7]
# BackTrishear.m:36
    
    ninc=round(slip / sinc)
# BackTrishear.m:37
    
    sincr=dot(slip / ninc,- 1.0)
# BackTrishear.m:38
    
    #Transformation matrix from geographic to fault coordinates
    a11=cos(ramp)
# BackTrishear.m:41
    a12=cos(pi / 2 - ramp)
# BackTrishear.m:42
    a21=cos(pi / 2 + ramp)
# BackTrishear.m:43
    a22=copy(a11)
# BackTrishear.m:44
    # Transform to coordinates parallel and perpendicular to the fault, and
# with origin at current fault tip
    fx=dot((xp - xtf),a11) + dot((yp - ytf),a12)
# BackTrishear.m:48
    fy=dot((xp - xtf),a21) + dot((yp - ytf),a22)
# BackTrishear.m:49
    # Restore
    for i in arange(1,ninc).reshape(-1):
        for j in arange(1,size(fx,1)).reshape(-1):
            # Solve trishear in a coordinate system attached to current 
         # fault tip. Note: First retrodeform and then move tip back
            xx=fx[j] - (dot(dot(psr,(i - 1)),abs(sincr)))
# BackTrishear.m:56
            yy=fy[j]
# BackTrishear.m:57
            vx,vy=VelTrishear(xx,yy,sincr,m,c,nargout=2)
# BackTrishear.m:59
            fx[j]=fx[j] + vx
# BackTrishear.m:61
            fy[j]=fy[j] + vy
# BackTrishear.m:62
    
    #Fit straight line to restored bed. Use MATLAB function regress (MATLAB
#Statistics Toolbox) to compute linear regression. b(1) is the intercept 
#and b(2) the slope of the line
    XX=matlabarray(cat(ones(size(fx)),fx))
# BackTrishear.m:69
    YY=copy(fy)
# BackTrishear.m:70
    b=regress(YY,XX)
# BackTrishear.m:71
    #Compute chisq (objective function) = Sum of square of residuals between 
#straight line and restored bed
    chisq=sum((fy - b[1] - dot(b[2],fx)) ** 2.0)
# BackTrishear.m:75
    return chisq
    
if __name__ == '__main__':
    pass
    