# Autogenerated with SMOP 
from smop.core import *
# Cauchy.m

    
@function
def Cauchy(stress=None,tX1=None,pX1=None,tX3=None,strike=None,dip=None,*args,**kwargs):
    varargin = Cauchy.varargin
    nargin = Cauchy.nargin

    #Given the stress tensor in a X1,X2,X3 coordinate system of any 
#orientation, Cauchy computes the X1,X2,X3 tractions on an arbitrarily
#oriented plane
    
    #   USE: [T,pT] = Cauchy(stress,tX1,pX1,tX3,strike,dip)
    
    #   stress = Symmetric 3 x 3 stress tensor
#   tX1 = trend of X1
#   pX1 = plunge of X1
#   tX3 = trend of X3
#   strike = strike of plane
#   dip = dip of plane
#   T = 1 x 3 vector with tractions in X1, X2 and X3
#   pT = 1 x 3 vector with direction cosines of pole to plane transformed
#        to X1,X2,X3 coordinates
    
    #   NOTE = Plane orientation follows the right hand rule 
#          Input/Output angles are in radians
    
    #   Cauchy uses functions DirCosAxes and SphToCart
    
    #MATLAB script written by Nestor Cardozo for the book Structural 
#Geology Algorithms by Allmendinger, Cardozo, & Fisher, 2011. If you use
#this script, please cite this as "Cardozo in Allmendinger et al. (2011)"
    
    #Compute direction cosines of X1,X2,X3
    dC=DirCosAxes(tX1,pX1,tX3)
# Cauchy.m:28
    #Calculate direction cosines of pole to plane
    p=zeros(1,3)
# Cauchy.m:31
    p[1],p[2],p[3]=SphToCart(strike,dip,1,nargout=3)
# Cauchy.m:32
    #Transform pole to plane to stress coordinates X1,X2,X3
#The transformation matrix is just the direction cosines of X1,X2,X3
    pT=zeros(1,3)
# Cauchy.m:36
    for i in arange(1,3).reshape(-1):
        for j in arange(1,3).reshape(-1):
            pT[i]=dot(dC[i,j],p[j]) + pT[i]
# Cauchy.m:39
    
    #Convert transformed pole to unit vector
    r=sqrt(dot(pT[1],pT[1]) + dot(pT[2],pT[2]) + dot(pT[3],pT[3]))
# Cauchy.m:44
    for i in arange(1,3).reshape(-1):
        pT[i]=pT[i] / r
# Cauchy.m:46
    
    #Calculate the tractions in stress coordinates X1,X2,X3
    T=zeros(1,3)
# Cauchy.m:50
    
    #Compute tractions using Cauchy's law (Eq. 6.7b)
    for i in arange(1,3).reshape(-1):
        for j in arange(1,3).reshape(-1):
            T[i]=dot(stress[i,j],pT[j]) + T[i]
# Cauchy.m:54
    
    return T,pT
    
if __name__ == '__main__':
    pass
    