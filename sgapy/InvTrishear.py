# Autogenerated with SMOP 
from smop.core import *
# InvTrishear.m

    
@function
def InvTrishear(xp=None,yp=None,tparams=None,sinc=None,maxit=None,*args,**kwargs):
    varargin = InvTrishear.varargin
    nargin = InvTrishear.nargin

    #InvTrishear performs inverse trishear modeling using a constrained, 
#gradient based optimization method
    
    #   [xbest,fval,flag] = InvTrishear(xp,yp,tparams,sinc,maxit)
    
    #   xp = column vector with x locations of points along bed
#   yp = column vector with y locations of points along bed  
#   tparams = A 1 x 8 vector with the x and y coordinates of the
#           lowest possible location of the fault tip (entries 1 and 2), 
#           the distance along the fault line from the lowest to the 
#           highest possible locations of the fault tip (lft, entry 3), 
#           the ramp angle (entry 4), the P/S (entry 5), the trishear angle 
#           (entry 6), the fault slip (entry 7), and the concentration 
#           factor (entry 8)
#   sinc = slip increment
#   maxit = maximum number of iterations in the optimized search
#   xbest = Best-fit model
#   fval = Objective function value of best-fit model
#   flag = Integer that indicates if the model converged (flag > 0)
    
    #   NOTE: Input ramp and trishear angles should be in radians
#         The search is for the best-fit slip, trishear angle, P/S, and lft
#         The MATLAB Optimization Toolbox is needed to run this function
    
    #   InvTrishear uses function BackTrishear
    
    #MATLAB script written by Nestor Cardozo for the book Structural 
#Geology Algorithms by Allmendinger, Cardozo, & Fisher, 2011. If you use
#this script, please cite this as "Cardozo in Allmendinger et al. (2011)"
    
    #Trishear parameters for BackTrishear
    tparam=zeros(1,7)
# InvTrishear.m:33
    #Known values
    xtt=tparams[1]
# InvTrishear.m:36
    
    ytt=tparams[2]
# InvTrishear.m:37
    tparam[3]=tparams[4]
# InvTrishear.m:38
    
    tparam[7]=tparams[8]
# InvTrishear.m:39
    
    #Set initial guess (x0), minimum (lb), and maximum (ub) parameters limits
#Entries in these vectors are: [slip trishear angle P/S lft]
#These entries should be in the same order of magnitude
#The values and scaling below only work for the Santa Fe Springs anticline
#Change lb and ub if you want to search over a larger or smaller parameter
#space
    sf=0.001
# InvTrishear.m:47
    
    x0=matlabarray(cat(dot(tparams[7],sf),tparams[6],tparams[5],dot(tparams[3],sf) / 2.0))
# InvTrishear.m:48
    
    lb=matlabarray(cat(0.0,dot(40.0,pi) / 180.0,1.5,0.0))
# InvTrishear.m:49
    
    ub=matlabarray(cat(15.0,dot(80.0,pi) / 180.0,3.5,dot(tparams[3],sf)))
# InvTrishear.m:50
    
    #Optimization settings: Display off, maximum number of iterations, and type
#of algorithm. Use MATLAB function optimset (MATLAB Optimization Toolbox)
    options=optimset('Display','off','MaxIter',maxit,'Algorithm','active-set')
# InvTrishear.m:54
    #Compute best-fit model using constrained, gradient based optimization 
#method. Use MATLAB function fmincon (MATLAB Optimization Toolbox)
    xbest,fval,flag=fmincon(objfun,x0,[],[],[],[],lb,ub,confun,options,nargout=3)
# InvTrishear.m:59
    
    #Function to compute the objective function for a given combination of
    #parameters x
    
@function
def objfun(x=None,*args,**kwargs):
    varargin = objfun.varargin
    nargin = objfun.nargin

    tparam[6]=x[1] / sf
# InvTrishear.m:67
    
    tparam[5]=x[2]
# InvTrishear.m:68
    
    tparam[4]=x[3]
# InvTrishear.m:69
    
    lft=x[4] / sf
# InvTrishear.m:70
    
    tparam[2]=ytt + dot(lft,sin(tparam[3]))
# InvTrishear.m:71
    
    tparam[1]=xtt + dot(lft,cos(tparam[3]))
# InvTrishear.m:72
    
    f=BackTrishear(xp,yp,tparam,sinc)
# InvTrishear.m:73
    
    return f
    
if __name__ == '__main__':
    pass
    
    #Function for constrained optimization method fmincon
    
@function
def confun(x=None,*args,**kwargs):
    varargin = confun.varargin
    nargin = confun.nargin

    # Nonlinear inequality constraints
    c=matlabarray([])
# InvTrishear.m:79
    
    ceq=matlabarray([])
# InvTrishear.m:81
    return c,ceq
    
if __name__ == '__main__':
    pass
    
    return c,ceq
    
if __name__ == '__main__':
    pass
    